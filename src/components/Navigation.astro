---
import ResponsiveToggle from './ResponsiveToggle.astro'
import Logo from './Logo.astro'

/**
 * Navigation Component
 *
 * @description A component that displays the navigation menu for the website
 */
---

<div id="main-navigation" class="py-8">
  <div class="container">
    <Logo />
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
 
<!-- Botón flotante para volver arriba con diseño moderno -->
<button id="scrollToTop" aria-label="Volver arriba" title="Subir" class="scroll-btn hidden">
  <!-- Ícono de Iconify (flecha hacia arriba) -->
  <span class="iconify scroll-icon" data-icon="solar:alt-arrow-up-bold"></span>
</button>

<style>
  .scroll-btn {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    z-index: 1000;
    opacity: 0;
    transform: translateY(100px) scale(0.8);
  }

  .scroll-btn:not(.hidden) {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .scroll-btn.hidden {
    pointer-events: none;
  }

  .scroll-btn:hover {
    transform: translateY(-5px) scale(1.1);
    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6),
                0 0 40px rgba(118, 75, 162, 0.4),
                0 0 60px rgba(102, 126, 234, 0.2);
    background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
  }

  .scroll-btn:active {
    transform: translateY(-3px) scale(1.05);
  }

  .scroll-icon {
    font-size: 1.5rem;
    color: white;
    transition: transform 0.3s ease;
  }

  .scroll-btn:hover .scroll-icon {
    transform: translateY(-3px);
    animation: bounce 0.6s ease infinite;
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateY(-3px);
    }
    50% {
      transform: translateY(-8px);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .scroll-btn {
      width: 3rem;
      height: 3rem;
      bottom: 1.5rem;
      right: 1.5rem;
    }
    
    .scroll-icon {
      font-size: 1.25rem;
    }
  }
</style>

<script>
  // Importar Iconify
  import 'https://code.iconify.design/3/3.1.0/iconify.min.js';

  const scrollBtn = document.getElementById('scrollToTop');
  
  // Mostrar/ocultar botón al hacer scroll
  window.addEventListener('scroll', () => {
    if (window.scrollY > 300) {
      scrollBtn?.classList.remove('hidden');
    } else {
      scrollBtn?.classList.add('hidden');
    }
  });
  
  // Scroll suave al hacer clic
  scrollBtn?.addEventListener('click', () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
</script>


</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // variables
    const mainNav = document.querySelector('#main-navigation') as HTMLElement | null
    if (!mainNav) return

    const mainMenu = mainNav.querySelector('ul') as HTMLUListElement | null
    const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')] as HTMLButtonElement[]

    // functions
    const setActiveMenuItem = (): void => {
      const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul')
      const currentPathname = window.location.pathname

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]

        menuItems.forEach((menuItem) => {
          if (currentPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Home') {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
          } else if (menuItem.textContent === 'Home' && currentPathname === '/') {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
          }
        })
      })
    }

    const isOutOfViewport = (element: Element): boolean => {
      const elementBounds = element.getBoundingClientRect()
      return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
    }

    const openDropdownMenu = (dropdownMenu: HTMLButtonElement): void => {
      const dropdownList = dropdownMenu.parentNode?.querySelector('ul') as HTMLUListElement | null
      if (!dropdownList) return

      dropdownMenu.classList.add('show')
      dropdownMenu.setAttribute('aria-expanded', 'true')

      if (isOutOfViewport(dropdownList)) {
        dropdownList.style.left = 'auto'
      }
    }

    const closeDropdownMenu = (dropdownMenu: HTMLButtonElement): void => {
      dropdownMenu.classList.remove('show')
      dropdownMenu.setAttribute('aria-expanded', 'false')
    }

    const closeAllDropdownMenus = (): void => {
      for (let i = 0; i < dropdownMenus.length; i++) {
        closeDropdownMenu(dropdownMenus[i])
      }
    }

    const toggleDropdownMenu = (event: MouseEvent): void => {
      const target = event.target as HTMLButtonElement
      if (target.getAttribute('aria-expanded') === 'false') {
        closeAllDropdownMenus()
        openDropdownMenu(target)
      } else {
        closeDropdownMenu(target)
      }
    }

    // execution
    mainMenu &&
      mainMenu.addEventListener('keydown', (event: KeyboardEvent) => {
        const element = event.target as Element
        const currentMenuItem = element.closest('li')
        const menuItems = [...mainMenu.querySelectorAll('.menu-item')] as HTMLLIElement[]
        const currentDropdownMenu = element.closest('.has-dropdown button') as HTMLButtonElement | null
        const currentDropdownMenuItem = element.closest('.has-dropdown li') as HTMLLIElement | null
        const currentIndex = currentMenuItem ? menuItems.findIndex((item) => item === currentMenuItem) : -1

        const key = event.key
        let targetItem: Element | null = null

        if (key === 'ArrowRight') {
          if (currentMenuItem && menuItems.indexOf(currentMenuItem as HTMLLIElement) === menuItems.length - 1) {
            targetItem = menuItems[0]
          } else if (currentMenuItem) {
            targetItem = menuItems[currentIndex + 1]
          }
        }

        if (key === 'ArrowLeft') {
          if (currentMenuItem && menuItems.indexOf(currentMenuItem as HTMLLIElement) === 0) {
            targetItem = menuItems[menuItems.length - 1]
          } else if (currentMenuItem) {
            targetItem = menuItems[currentIndex - 1]
          }
        }

        if (key === 'Escape') {
          targetItem = menuItems[0]
        }

        if (currentDropdownMenu) {
          const nextElement = currentDropdownMenu.nextElementSibling as Element | null
          if (nextElement) {
            const firstDropdownItem = nextElement.querySelector('li')

            if (key === 'ArrowDown') {
              event.preventDefault()
              openDropdownMenu(currentDropdownMenu)
              targetItem = firstDropdownItem
            }
          }

          if (key === 'Escape') {
            closeDropdownMenu(currentDropdownMenu)
          }
        }

        if (currentDropdownMenuItem) {
          const currentDropdownList = currentDropdownMenuItem.parentNode as Element | null
          if (currentDropdownList) {
            const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')] as HTMLLIElement[]
            const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem)

            if (key === 'ArrowDown') {
              event.preventDefault()

              if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === dropdownMenuItems.length - 1) {
                targetItem = dropdownMenuItems[0]
              } else {
                targetItem = dropdownMenuItems[currentIndex + 1]
              }
            }

            if (key === 'ArrowUp') {
              event.preventDefault()

              if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === 0) {
                targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
              } else {
                targetItem = dropdownMenuItems[currentIndex - 1]
              }
            }

            if (key === 'Escape') {
              const currentDropdownMenu = currentDropdownList.previousElementSibling as HTMLButtonElement | null
              if (currentDropdownMenu) {
                targetItem = currentDropdownMenu.parentElement
                closeAllDropdownMenus()
              }
            }

            if (key === 'Tab') {
              const currentDropdownMenu = currentDropdownList.previousElementSibling as HTMLButtonElement | null
              if (currentDropdownMenu) {
                if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === dropdownMenuItems.length - 1) {
                  closeDropdownMenu(currentDropdownMenu)
                }
              }
            }
          }
        }

        if (targetItem) {
          const focusableElement = targetItem.querySelector('a, button, input') as HTMLElement | null
          if (focusableElement) {
            focusableElement.focus()
          }
        }
      })

    dropdownMenus &&
      dropdownMenus.forEach((dropdownMenu) => {
        dropdownMenu.addEventListener('click', toggleDropdownMenu as EventListener)
      })

    setActiveMenuItem()
    window.addEventListener('click', (event: MouseEvent) => {
      const element = event.target as Element
      if (!element.hasAttribute('aria-haspopup') && !element.classList.contains('submenu-item')) {
        closeAllDropdownMenus()
      }
    })
    // Botón de volver arriba
    const scrollToTopBtn = document.querySelector('#scrollToTop')

    if (scrollToTopBtn) {
      // Mostrar / ocultar al hacer scroll
      window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
          scrollToTopBtn.classList.remove('hidden')
        } else {
          scrollToTopBtn.classList.add('hidden')
        }
      })

      // Subir al hacer clic
      scrollToTopBtn.addEventListener('click', () => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth',
        })
      })
    }



  })
</script>

<style lang="scss" is:global
>
  
  @use '../assets/scss/base/mixins' as *;
  @use '../assets/scss/base/breakpoint' as *;

  #main-navigation {
    > .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    // Mobile-first: show mobile menu by default
    .mobile-menu {
      display: none;

      &.show {
        display: block;
      }
    }

    .responsive-toggle {
      display: flex;
      align-items: center;
      gap: var(--space-2xs);
    }

    .desktop-menu {
      display: none;
    }

    // Desktop: switch to desktop menu at nav breakpoint
    @include breakpoint('nav') {
      .mobile-menu {
        display: none;
      }

      .responsive-toggle {
        display: none;
      }

      .desktop-menu {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: var(--space-m);
    }

    a,
    button {
      color: var(--foreground-color);
    }

    nav {
      > ul {
        display: flex;
        gap: var(--space-m);
        list-style-type: none;

        li {
          align-content: center;
        }

        a:hover,
        a:focus-visible,
        .is-active,
        button[aria-expanded='true'],
        .has-dropdown > button:hover,
        .has-dropdown > button:focus-visible {
          text-decoration: underline;
          text-decoration-style: wavy;
          text-decoration-thickness: 1px;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }

        .highlight a {
          display: inline-flex;
          align-items: center;
          gap: var(--space-2xs);
          transition: all var(--animation-speed-fast) var(--cubic-bezier);
          margin-block-start: calc(var(--space-4xs) * -1);
          border: 1px solid var(--foreground-color);
          border-radius: var(--radius-large);
          padding: var(--space-4xs) var(--space-2xs);
          text-decoration: none;

          &:where(:hover, :focus-visible) {
            background-color: var(--foreground-color);
            color: var(--background-color) !important;
          }
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      margin-block-start: var(--space-m);
      border: 1px solid var(--border-color-subtle);
      border-radius: var(--radius-l);
      padding: var(--space-m);

      > ul {
        flex-direction: column;
        align-items: flex-start;

        ul {
          position: relative;
          margin-block-start: var(--space-m);
        }
      }

      a,
      button {
        display: block;
        padding: var(--space-2xs) 0;
        inline-size: 100%;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: var(--space-4xs);
        margin-block-start: -1px;

        svg {
          transition: all var(--animation-speed-instant) var(--cubic-bezier);
        }

        &.show {
          svg {
            scale: -1;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        flex-direction: column;
        gap: var(--space-2xs);
        translate: 0 1rem;
        opacity: 0;
        z-index: 100;
        inset-block-start: 125%;
        inset-inline-end: 0;
        inset-inline-start: 0;
        box-shadow: var(--elevation-4);
        border: 2px solid var(--border-color-subtle);
        border-radius: var(--radius-l);
        background-color: var(--background-color);
        padding: var(--space-m);
        min-inline-size: 275px;

        @media (prefers-reduced-motion: no-preference) {
          transition-behavior: allow-discrete;
          transition-duration: var(--animation-speed-fast);
          transition-property: display, opacity, translate;
          transition-timing-function: var(--cubic-bezier);
        }
      }

      > button.show ~ ul {
        display: flex;
        translate: 0;
        opacity: 1;

        @starting-style {
          translate: 0 1rem;
          opacity: 0;
        }
      }
    }

    .darkmode-toggle {
      border: none;
      padding: 0;

      @include breakpoint('nav') {
        // Align with the menu items
        margin-block-start: 7px;
      }

      .icon {
        inline-size: 30px;
        block-size: 30px;
      }

      &:where(:hover, :focus-visible) {
        box-shadow: none;
      }

      &:focus {
        @include outline;

        &:not(:focus-visible) {
          outline: none;
          box-shadow: none;
        }
      }
    }
  }
  
#scrollToTop {
  position: fixed;
  bottom: 2rem;
  right: 2rem;
  background-color: var(--foreground-color);
  color: var(--background-color);
  border: none;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  z-index: 9999;
  opacity: 0.8;
  transition: opacity 0.3s ease, transform 0.3s ease, background-color 0.3s ease;

  svg {
    width: 24px;
    height: 24px;
    stroke: currentColor;
  }

  &:hover {
    opacity: 1;
    transform: scale(1.1);
    background-color: var(--foreground-color-hover, var(--foreground-color));
  }

  &.hidden {
    opacity: 0;
    pointer-events: none;
    transform: translateY(20px);
  }
}

/* Adaptación a modo oscuro */
@media (prefers-color-scheme: dark) {
  #scrollToTop {
    background-color: var(--foreground-color);
    color: var(--background-color);
  }
}

/* Para consistencia con tu toggle darkmode */
.icon-button {
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: 50%;
  padding: 0;
  background-color: var(--foreground-color);
  color: var(--background-color);
  transition: all 0.3s ease;

  &:hover {
    transform: scale(1.1);
  }
}


</style>
