---
interface PhysicsTopic {
  id: number
  title: string
  description: string
  url: string
  featuredImage: string
  category: string
}

const physicsTopics: PhysicsTopic[] = [
  { id: 1, title: 'Movimiento Rectilíneo Uniforme (MRU)', description: 'Estudio del movimiento en línea recta con velocidad constante.', url: '/movimiento-rectilineo-uniforme', featuredImage: '/images/mru.webp', category: 'Cinemática' },
  { id: 2, title: 'Movimiento Rectilíneo Uniformemente Variado (MRUV)', description: 'Análisis del movimiento con aceleración constante.', url: '/movimiento-rectilineo-uniformemente-variado', featuredImage: '/images/mruv.webp', category: 'Cinemática' },
  { id: 3, title: 'Caída Libre', description: 'Movimiento vertical bajo la acción de la gravedad.', url: '/caida-libre', featuredImage: '/images/caidalibre.webp', category: 'Cinemática' },
  { id: 4, title: 'Tiro Parabólico', description: 'Movimiento de proyectiles en dos dimensiones.', url: '/tiro-parabolico', featuredImage: '/images/tiroparabolico.webp', category: 'Cinemática' },
  { id: 5, title: 'Estática', description: 'Estudio del equilibrio de fuerzas y momentos.', url: '/estatica', featuredImage: '/images/estatica.webp', category: 'Mecánica' },
  { id: 6, title: 'Leyes de Newton', description: 'Fundamentos de la dinámica clásica.', url: '/leyes-de-newton', featuredImage: '/images/leyes.webp', category: 'Dinámica' },
  { id: 7, title: 'Energía y Trabajo Mecánico', description: 'Conceptos de energía cinética, potencial y trabajo.', url: '/energia-y-trabajo-mecanico', featuredImage: '/images/energia.webp', category: 'Mecánica' }
]
---

<section class="carousel-section w-full max-w-[70%] mx-auto my-16 relative">
  <!-- Botones -->
  <button id="prevBtn" class="absolute left-4 top-1/2 transform -translate-y-1/2 z-20 bg-white/70 hover:bg-white p-4 rounded-full shadow-lg transition duration-300">&lt;</button>
  <button id="nextBtn" class="absolute right-4 top-1/2 transform -translate-y-1/2 z-20 bg-white/70 hover:bg-white p-4 rounded-full shadow-lg transition duration-300">&gt;</button>

  <!-- Slides -->
  <div class="overflow-hidden rounded-xl shadow-2xl">
    <div id="carouselTrack" class="flex transition-transform duration-700 ease-in-out">
      {physicsTopics.map(topic => (
        <a href={topic.url} target="_blank" rel="noopener noreferrer" class="flex-shrink-0 w-full cursor-pointer">
          <div class="relative w-full h-96 md:h-[500px] rounded-xl overflow-hidden">
            <img src={topic.featuredImage} alt={topic.title} class="w-full h-full object-cover brightness-90 transition-transform duration-500 hover:scale-105" />
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent"></div>
            <div class="absolute bottom-6 left-6 text-white">
              <span class="bg-blue-600 px-3 py-1 rounded-full text-sm">{topic.category}</span>
              <h2 class="text-3xl md:text-4xl font-bold mt-2">{topic.title}</h2>
              <p class="mt-1 text-lg md:text-xl">{topic.description}</p>
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>

  <!-- Indicators-->
  <div class="flex justify-center mt-4 space-x-2">
    {physicsTopics.map((_, index) => (
      <span class={`w-3 h-3 rounded-full transition-all ${index === 0 ? 'bg-blue-600' : 'bg-gray-400'}`} data-index={index}></span>
    ))}
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const track = document.getElementById('carouselTrack') as HTMLElement | null;
  if (!track) return;
  const slides = Array.from(track.children) as HTMLElement[];
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const indicators = document.querySelectorAll('.carousel-section span[data-index]');
  let currentIndex = 0;

  function updateCarousel() {
    if (slides.length === 0) return;
    const slideWidth = (slides[0] as HTMLElement).offsetWidth;
    track!.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
    indicators.forEach((dot, i) => {
      dot.classList.toggle('bg-blue-600', i === currentIndex);
      dot.classList.toggle('bg-gray-400', i !== currentIndex);
    });
  }

  prevBtn?.addEventListener('click', () => {
    currentIndex = (currentIndex === 0) ? slides.length - 1 : currentIndex - 1;
    updateCarousel();
  });

  nextBtn?.addEventListener('click', () => {
    currentIndex = (currentIndex === slides.length - 1) ? 0 : currentIndex + 1;
    updateCarousel();
  });

  // Autoplay
  setInterval(() => {
    currentIndex = (currentIndex === slides.length - 1) ? 0 : currentIndex + 1;
    updateCarousel();
  }, 5000);

  // Ajuste responsive
  window.addEventListener('resize', updateCarousel);
});
</script>

<style>
#prevBtn, #nextBtn {
  cursor: pointer;
  font-size: 1.5rem;
  user-select: none;
}
</style>